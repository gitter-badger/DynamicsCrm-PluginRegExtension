<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".js" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrmCodeGenerator.VSPackage.Model" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<# // >>>>>>>>>> MINIMUM COMPATIBLE VERSION to successfully generate the schema using this template is 20.16.4. <<<<<<<<<< #>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName #>.js
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

<#    var suffix = new Random().Next(1000000, 9999999); #>

var SdkEntitiesInitialisation<#= suffix #> = function ()
{
(function () {
<# foreach (var entity in Context.Entities) { #>

	this.<#=entity.HybridName#> = function (entity) {
		///<summary>
		/// <#=entity.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t/// ") #>
		///</summary>
		/// <param name='entity' type='Sdk.Entity' mayBeNull='true' optional='true'>
		/// Optional. Use only to convert an Sdk.Entity into an Sdk.<#=entity.HybridName#>
		///</param>
		if (!(this instanceof Sdk.<#=entity.HybridName#>)) {
			return new Sdk.<#=entity.HybridName#>();
		}
		Sdk.Entity.call(this);
		this.setType("<#=entity.LogicalName#>");
		if (typeof entity != "undefined" && entity != null) {
			if (entity instanceof Sdk.Entity) {
				if (entity.getType() == this.getType()) {
					this.setAttributes(entity.getAttributes());
					this.setFormattedValues(entity.getFormattedValues());
					this.setRelatedEntities(entity.getRelatedEntities());
					if (entity.getId() != null) {
						this.setId(entity.getId());
					}
				}
				else {
						throw new Error("Invalid type Sdk.<#=entity.HybridName#> entity constructor parameter must be an Sdk.Entity of Type <#=entity.LogicalName#>");
				}
			}
			else {
				throw new Error("Invalid argument Sdk.<#=entity.HybridName#> entity constructor parameter must be an Sdk.Entity");
			}
		}

<#	foreach(var attribute in entity.Fields)	{ #>
<#	if(attribute.Attribute.IsEntityReferenceHelper) continue;#>

		// <#=attribute.DisplayName#> START --------------------------------------------------------------
<#
	if (attribute.FieldTypeString != null)
	{
		var type = "";

		if (attribute.FieldTypeString.Contains("<int>"))
		{
			type = "int";
		}
		else if (attribute.FieldTypeString.Contains("<long>"))
		{
			type = "long";
		}
		else if (attribute.FieldTypeString.Contains("<decimal>"))
		{
			type = "decimal";
		}
		else if (attribute.FieldTypeString.Contains("<double>"))
		{
			type = "double";
		}
		else if (attribute.FieldTypeString.Contains("Money"))
		{
			type = "money";
		}

		if (!string.IsNullOrEmpty(type))
		{
			WriteNumber(attribute.IsValidForRead, attribute.IsValidForUpdate || attribute.IsValidForCreate, attribute.Attribute.LogicalName,
				attribute.SchemaName, attribute.DisplayName, attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// "),
				attribute.IsRequired, type, attribute.Max, attribute.Min);
		}

		if (attribute.FieldTypeString.Contains("<bool>"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.Boolean("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.Boolean'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <param name='value' type='Boolean' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Boolean'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("DateTime"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.DateTime("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.DateTime'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <param name='value' type='Date' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Date'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("ManagedProperty"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.BooleanManagedProperty("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.BooleanManagedProperty'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <param name='value' type='Sdk.BooleanManagedPropertyValue' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: SystemRequired</para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Sdk.BooleanManagedPropertyValue'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("<ActivityParty>"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.PartyList("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.PartyList'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <para>Label: <#= attribute.DisplayName #></para>
			/// <param name='value' type='Sdk.EntityCollection' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Sdk.EntityCollection'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("OptionSetValue"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.OptionSet("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.OptionSet'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <para>Label: <#= attribute.DisplayName #></para>
			/// <param name='value' type='Number' integer='true' mayBeNull='true' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Number' integer='true' mayBeNull='true'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains(attribute.Entity.StateName))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.OptionSet("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.OptionSet'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <para>Label: <#= attribute.DisplayName #></para>
			/// <param name='value' type='Number' integer='true' mayBeNull='true' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Number' integer='true' mayBeNull='true'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("Guid"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.Guid("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.Guid'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <param name='value' type='String' mayBeNull='true' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='String' mayBeNull='true' optional='false'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("EntityReference"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.Lookup("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.Lookup'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <param name='value' type='Sdk.EntityReference' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>Target: <#= attribute.LookupSingleType ?? "" #></para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='Sdk.EntityReference'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}

		if (attribute.FieldTypeString.Contains("string"))
		{
#>
		var <#= attribute.SchemaName #>;
		try
		{
			<#= attribute.SchemaName #> = entity.getAttributes('<#= attribute.Attribute.LogicalName #>');
		}
		catch(e)
		{
			<#= attribute.SchemaName #> = new Sdk.String("<#= attribute.Attribute.LogicalName #>");
		}
		this.addAttribute(<#= attribute.SchemaName #>, false);
		/// <field name='<#= attribute.SchemaName #>' type='Sdk.String'><#= attribute.DisplayName #> : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </field>
		this.<#= attribute.SchemaName #> = {};
<#	if ( attribute.IsValidForUpdate || attribute.IsValidForCreate) { #>
		this.<#= attribute.SchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attribute.SchemaName #> value</summary>
			/// <param name='value' type='String' optional='false'>
			/// <para><#= attribute.DisplayName #>  : <#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #> </para>
			/// <para>MaxLength: <#= attribute.MaxLength ?? -1 #></para>
			/// <para>RequiredLevel: <#= attribute.IsRequired #></para>
			/// </param>
			<#= attribute.SchemaName #>.setValue(value);
		};
	<#	} #>
<#	if (attribute.IsValidForRead) { #>
		this.<#= attribute.SchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attribute.SchemaName #> value
			///</summary>
			/// <returns type='String'><#= attribute.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #></returns>
			return <#= attribute.SchemaName #>.getValue();
		}
<#	} #>
<#
		}
	}
#>
		// <#=attribute.DisplayName#> END --------------------------------------------------------------
<# } #>
	};
<# } #>
}).call(Sdk);

<# ParseActions("", Context.GlobalActions); #>

<# foreach (var entity in Context.Entities) {
	ParseActions(entity.HybridName, entity.Actions);
} #>

<# foreach (var entity in Context.Entities) { #>
Sdk.<#=entity.HybridName#>.prototype = new Sdk.Entity("<#=entity.LogicalName#>");
<# } #>

<# foreach (var entity in Context.Entities) { #>
Sdk.<#=entity.HybridName#>.DisplayName = <#=ToLiteral(entity.Label)#>;
Sdk.<#=entity.HybridName#>.SchemaName = "<#=entity.SchemaName#>";
Sdk.<#=entity.HybridName#>.EntityLogicalName = "<#=entity.LogicalName#>";
Sdk.<#=entity.HybridName#>.EntityTypeCode = <#=entity.TypeCode#>;

Sdk.<#=entity.HybridName#>.Enums =
{
<#foreach(var enm in entity.Enums){#>
	<#=enm.DisplayName#>:
	{
<#foreach(var item in enm.Items){#>
		<#= item.Name #>: <#= item.Value #>,
<#}#>
		dummyValue: ''
	},
	
<#}#>
	Names:
	{
<#foreach(var enm in entity.Enums){#>
		<#=enm.DisplayName#>: "<#=enm.LogicalName#>",
<#}#>
		dummyValue: ''
	},

	Labels:
	{
<#foreach(var enm in entity.Enums){#>
		<#=enm.DisplayName#>:
		{
<# foreach(var item in enm.Items) { #>
<# foreach(var itemLoc in item.LocalizedLabels) { #>
			<#= item.Name #>_<#= itemLoc.LanguageCode #>: <#= ToLiteral(itemLoc.Label) #>,
<# } #>
<# } #>
			dummyValue: ''
		},
<# } #>
		dummyValue: ''
	}
}

Sdk.<#=entity.HybridName#>.Fields =
{
<#foreach(var f in entity.Fields){#>
	<#=f.DisplayName#>: "<#=f.Attribute.LogicalName#>",
<#}#>

	Schema:
	{
<#foreach(var f in entity.Fields){#>
		<#=f.DisplayName#>: "<#=f.SchemaName#>",
<#}#>
		dummyValue: ''
	}
}

Sdk.<#=entity.HybridName#>.Relations =
{
	OneToN:
	{
<#
foreach(var attribute in entity.RelationshipsOneToMany.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{#>
<# if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
		<#=attribute.SchemaName#>: "calendarrules",
<# } else { #>
		<#=attribute.SchemaName#>: "<#=attribute.SchemaName#>",
<# } #>
<# } #>
		dummyValue: ''
	},
			
	NToOne:
	{
<#
foreach(var attribute in entity.RelationshipsManyToOne.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{#>
		<#=attribute.SchemaName#>: "<#=attribute.SchemaName#>",
<# } #>
		Lookups:
		{
<#
foreach(var attribute in entity.RelationshipsManyToOne.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{#>
			<#=attribute.SchemaName#>: "<#=attribute.LogicalName#>",
<# } #>
			dummyValue: ''
		}
	},

	NToN:
	{

<#
foreach(var attribute in entity.RelationshipsManyToMany.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{
#>
		<#=attribute.SchemaName#>: "<#=attribute.SchemaName#>",
<# } #>
		dummyValue: ''
	}
}

<# } #>
}

function SdkEntitiesInitialisation<#= suffix #>Loop()
{
	if (typeof Sdk === 'undefined' || Sdk === null)
	{
		setTimeout(SdkEntitiesInitialisation<#= suffix #>Loop, 10);
	}
	else
	{
		SdkEntitiesInitialisation<#= suffix #>();
	}
}

SdkEntitiesInitialisation<#= suffix #>Loop();

<#+ void WriteNumber(bool includeGetter,
			bool includeSetter,
			string attLogicalName,
			string attSchemaName,
			string attDisplayName,
			string attDescription,
			bool requiredLevel,
			string type,
			decimal? maxValue,
			decimal? minValue)
				{
					var thisType = "not Set";

					switch (type)
					{
									case "long":
													thisType = "Sdk.Long";
													break;
									case "decimal":
													thisType = "Sdk.Decimal";
													break;
									case "double":
													thisType = "Sdk.Double";
													break;
									case "int":
													thisType = "Sdk.Int";
													break;
									case "money":
													thisType = "Sdk.Money";
													break;
									default:
													break;
					}
 #>
		var <#= attSchemaName #>;
		try
		{
			<#= attSchemaName #> = entity.getAttributes('<#= attLogicalName #>');
		}
		catch(e)
		{
			<#= attSchemaName #> = new <#= thisType #>("<#= attLogicalName #>");
		}
		this.addAttribute(<#= attSchemaName #>, false);
		/// <field name='<#= attSchemaName #>' type='<#= thisType #>'><#= attDisplayName #> : <#= attDescription #></field>
		this.<#= attSchemaName #> = {};
<#+	if (includeGetter) { #>
		this.<#= attSchemaName #>.getValue = function () {
			///<summary>
			/// Gets the <#= attSchemaName #> value
			///</summary>
			/// <returns type='Number'><#= attDescription #></returns>
			return <#= attSchemaName #>.getValue();
		};
<#+	} #>
<#+	if (includeSetter) { #>
		this.<#= attSchemaName #>.setValue = function (value) {
			///<summary>Sets the <#= attSchemaName #> value</summary>
			/// <param name='value' type='Number' optional='false'>
			/// <para><#= attDisplayName #> : <#= attDescription #></para>
			/// <para>MinValue: <#= minValue #></para>
			/// <para>MaxValue: <#= maxValue #></para>
			/// <para>RequiredLevel: <#= requiredLevel #></para>
			/// </param>
			<#= attSchemaName #>.setValue(value);
		}
<#+	} #>
<#+	} #>
<#+
	private void ParseActions(string entityHybridName, MappingAction[] actions)
	{
        var actionPath = string.Format("Sdk.{0}Actions", (!string.IsNullOrEmpty(entityHybridName)) ? entityHybridName + "." : "Global");
#>
<#= actionPath #> = <#= actionPath #> || {};
(function () {
<#+ foreach(var action in actions) { #>
	this.<#= action.VarName #>Request = function (

<#+
    int parameterCount = 0;
    foreach (var item in action.InputFields)
    {
        parameterCount++;
    }
                                

    String[] parameterNames = new String[parameterCount];
    int count = 0;
    foreach (var item in action.InputFields)
    {
        parameterNames[count] = item.VarName;
        count++;
    }
#>
	<#=	string.Join(",\r\n", parameterNames) #>
	)
	{
		///<summary>
		/// <#= action.Description #>
		///</summary>
<#+ foreach (MappingAction.InputField rp in action.InputFields) { #>
		///<param name="<#= rp.VarName #>" optional="<#= rp.Optional #>" type="rp.JavaScriptValidationType">
		/// [Add Description]
		///</param>
<#+ } #>
		if (!(this instanceof <#= actionPath #>.<#= action.VarName #>Request)) {
			return new <#= actionPath #>.<#= action.VarName #>Request(<#=	string.Join(",\r\n				", parameterNames) #>);
		}
		Sdk.OrganizationRequest.call(this);
<#+ if (parameterCount == 0) { #>
		// This message has no parameters
<#+
    }
    else
    {
#>
		// Internal properties
<#+ } #>

<#+ foreach (MappingAction.InputField rp in action.InputFields) { #>
		var _<#= rp.VarName #> = null;
<#+ } #>
		<#+ if (parameterCount != 0) { #>// internal validation functions
<#+ } #>
 <#+ foreach (MappingAction.InputField rp in action.InputFields) { #>
		function _setValid<#= (char.ToUpperInvariant(rp.VarName[0]) + rp.VarName.Substring(1)) #>(value) {
			if (<#+ if (rp.Optional) { #>value == null || <#+ } #><#= rp.JavaScriptValidationExpression #>) {
				_<#= rp.VarName #> = value;
			}
			else {
				throw new Error("<#= actionPath #>.<#= action.VarName #>Request <#= (char.ToUpperInvariant(rp.VarName[0]) + rp.VarName.Substring(1)) #> property <#+ if (!rp.Optional) { #>is required and <#+ } #>must be a <#= rp.JavaScriptValidationType #><#+ if (rp.Optional) { #> or null<#+ } #>.")
			}
		}
<#+ } #>
<#+ if (parameterCount != 0) { #>		// Set internal properties from constructor parameters
<#+ } #>
<#+ foreach (MappingAction.InputField rp in action.InputFields) { #>
		if (typeof <#= rp.VarName #> != "undefined") {
			_setValid<#= (char.ToUpperInvariant(rp.VarName[0]) + rp.VarName.Substring(1)) #>(<#= rp.VarName #>);
		}
<#+ } #>
		function getRequestXml() {
			return ["<d:request>",
				<#+ if (parameterCount == 0) { #>"<a:Parameters />",<#+ } else { #>"<a:Parameters>",<#+ } #>

<#+ foreach (MappingAction.InputField rp in action.InputFields) { #>
				"<a:KeyValuePairOfstringanyType>",
				"<b:key><#= rp.Name #></b:key>",
				(_<#= rp.VarName #> == null) ? "<b:value i:nil=\"true\" />" :
<#+
	switch (rp.TypeName) {
		case "Microsoft.Xrm.Sdk.OptionSetValue":
#> 
				["<b:value i:type=\"a:OptionSetValue\">",
				"<a:Value>",_<#= rp.VarName #>,"</a:Value>",
				"</b:value>"].join(""),
<#+
			break;
        case "Microsoft.Xrm.Sdk.Money":
#>
				["<b:value i:type=\"a:Money\">",
				"<a:Value>",_<#= rp.VarName #>,"</a:Value>",
				"</b:value>"].join(""),
<#+
            break;
        default:
#>
				["<b:value i:type=\"<#= rp.NamespacedType #>\">", _<#= rp.VarName #><#= rp.SerializeExpression #>, "</b:value>"].join(""),
<#+
            break;

    }
#>
				"</a:KeyValuePairOfstringanyType>",
<#+ } #>
				<#+ if (parameterCount != 0) { #>"</a:Parameters>",<#+ } #>
				"<a:RequestId i:nil=\"true\" />",
				"<a:RequestName><#= action.VarName #></a:RequestName>",
				"</d:request>"].join("");
			}
			this.setResponseType(<#= actionPath #>.<#= action.VarName #>Response);
			this.setRequestXml(getRequestXml());
			<#+ if (parameterCount != 0) { #>// Public methods to set properties
			<#+ } #>
<#+ foreach (MappingAction.InputField rp in action.InputFields) { #>
			this.set<#= (char.ToUpperInvariant(rp.VarName[0]) + rp.VarName.Substring(1)) #> = function (value) {
				///<summary>
				/// [Add Description]
				///</summary>
				///<param name="value" type="<#= rp.JavaScriptValidationType #>">
				/// [Add Description]
				///</param>
				_setValid<#= (char.ToUpperInvariant(rp.VarName[0]) + rp.VarName.Substring(1)) #>(value);
				this.setRequestXml(getRequestXml());
			}
<#+ } #>
 }
		this.<#= action.VarName #>Request.__class = true;
		this.<#= action.VarName #>Response = function (responseXml) {
			///<summary>
			/// Response to <#= action.VarName #>Request
			///</summary>
			if (!(this instanceof <#= actionPath #>.<#= action.VarName #>Response)) {
				return new <#= actionPath #>.<#= action.VarName #>Response(responseXml);
			}
			Sdk.OrganizationResponse.call(this)
<#+
    int responseFieldsCount = 0;

    foreach (MappingAction.OutputField rf in action.OutputFields)
    {
        responseFieldsCount++;
    }
    if (responseFieldsCount == 0)
    {
#>
		// This message returns no values
<#+
    }
    else
    {
#>
		// Internal properties
<#+
    }
    foreach (MappingAction.OutputField rf in action.OutputFields)
    {
#>
		var _<#= rf.VarName #> = null;
<#+ } #>
 		<#+ if (responseFieldsCount != 0) { #>// Internal property setter functions
<#+ } #>
<#+
	foreach (MappingAction.OutputField rf in action.OutputFields)
	{
#>
		function _set<#= (char.ToUpperInvariant(rf.VarName[0]) + rf.VarName.Substring(1)) #>(xml) {
			var valueNode = Sdk.Xml.selectSingleNode(xml, "//a:KeyValuePairOfstringanyType[b:key='<#= rf.Name #>']/b:value");
			if (!Sdk.Xml.isNodeNull(valueNode)) {
				_<#= rf.VarName #> = <#= rf.ValueNodeParser #>;
			}
		}
<#+ } #>
  		<#+ if (responseFieldsCount != 0) { #>//Public Methods to retrieve properties
		<#+ } #>
<#+
    foreach (MappingAction.OutputField rf in action.OutputFields)
    {
#>
		this.get<#= (char.ToUpperInvariant(rf.VarName[0]) + rf.VarName.Substring(1)) #> = function () {
			///<summary>
			/// [Add Description]
			///</summary>
			///<returns type="<#= rf.JavaScriptType #>">
			/// [Add Description]
			///</returns>
			return _<#= rf.VarName #>;
		}
<#+ } #>
   		<#+ if (responseFieldsCount != 0) { #>//Set property values from responseXml constructor parameter
		<#+ } #>
<#+
	foreach (MappingAction.OutputField rf in action.OutputFields)
	{
#>
		_set<#= (char.ToUpperInvariant(rf.VarName[0]) + rf.VarName.Substring(1)) #>(responseXml);
<#+ } #>
 }
	this.<#= action.VarName #>Response.__class = true;

	this.<#=action.VarName#>Action = function ()
	{	
		var Request = new <#= actionPath #>.<#= action.VarName #>Request();
		var Response = null;
		this.Inputs = {};
		this.Outputs = {};

		this.execute = function (async, action, successCallBack, errorCallBack)
		{
			///<summary>
			/// Execute the action request.
			///</summary>
			///<param name="async" type="Boolean" optional="true" mayBeNull="true">
			/// Specify whether to execute asynchronously
			///</param>
			///<param name="action" type="<#= actionPath #>.<#=action.VarName#>Action" optional="true" mayBeNull="true">
			/// The action object to be passed to the success callback
			///</param>
			///<param name="successCallBack" type="Function" optional="true" mayBeNull="true">
			/// Pass callback function, which takes the action object
			///</param>
			///<param name="errorCallBack" type="Function" optional="true" mayBeNull="true">
			/// Pass callback function, which takes an error parameter
			///</param>

			if (async)
			{
				successCallBack = successCallBack || null;
				errorCallBack = errorCallBack || null;

				Sdk.Async.execute(Request,
					function (response)
					{
						Response = response;

						if (successCallBack)
						{
							successCallBack(action);
						}
					},
					errorCallBack);
			}
			else
			{
				Response = Sdk.Sync.execute(Request);
			}
		}

<#+ foreach(var inputField in action.InputFields) { #>

		this.Inputs.set<#= (char.ToUpperInvariant(inputField.VarName[0]) + inputField.VarName.Substring(1)) #> = function (value) {
				///<summary>
				/// [Add Description]
				///</summary>
				///<param name="value" type="<#= inputField.JavaScriptValidationType #>">
				/// [Add Description]
				///</param>
			Request.set<#= (char.ToUpperInvariant(inputField.VarName[0]) + inputField.VarName.Substring(1)) #>(value);
		};
<#+ } #>
		
<#+ foreach(var outputField in action.OutputFields) { #>

		this.Outputs.get<#= (char.ToUpperInvariant(outputField.VarName[0]) + outputField.VarName.Substring(1)) #> = function () {
			///<summary>
			/// [Add Description]
			///</summary>
			///<returns type="<#= outputField.JavaScriptType #>">
			/// [Add Description]
			///</returns>
			return Response.get<#= (char.ToUpperInvariant(outputField.VarName[0]) + outputField.VarName.Substring(1)) #>();
		}
<#+ } #>
	};
<#+ } #>
}).call(<#= actionPath #>)

<#+ foreach(var action in actions) { #>
<#= actionPath #>.<#= action.VarName #>Request.prototype = new Sdk.OrganizationRequest();
<#= actionPath #>.<#= action.VarName #>Response.prototype = new Sdk.OrganizationResponse();
<#+ } #>

<#+ } #>
<#+
    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }
#>
