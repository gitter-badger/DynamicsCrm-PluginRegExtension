<#@ template language="C#" hostspecific="True" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrmCodeGenerator.VSPackage.Model" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<# // >>>>>>>>>> MINIMUM COMPATIBLE VERSION to successfully generate the schema using this template is 20.16.4. <<<<<<<<<< #>
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
#>
<# manager.StartHeader(); #>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName #>.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;

namespace <#= Context.Namespace #><# if (Context.FileName != "CrmSchema") { #>.<#= Context.FileName #><#}#>

{
<# manager.EndBlock(); #>

	#region Extensions

	[ExcludeFromCodeCoverage]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		[System.Diagnostics.DebuggerNonUserCode()]
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumParentType.GetNestedType("Labels");
			var labelType = labelsType.GetNestedType(enumType.Name);
			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		[System.Diagnostics.DebuggerNonUserCode()]
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	public static partial class CrmHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		[System.Diagnostics.DebuggerNonUserCode()]
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields().Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
																&& (string)fieldQ.GetValue(labelType) == label).ToList();

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var enumType = enumsType.GetNestedType(labelType.Name);

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		[System.Diagnostics.DebuggerNonUserCode()]
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			return field == null ? null : enumsType.GetNestedType(field.Name);
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		[System.Diagnostics.DebuggerNonUserCode()]
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);
			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelType = enumsType.GetNestedType("Labels").GetNestedType(enumName);

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		[System.Diagnostics.DebuggerNonUserCode()]
		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		[System.Diagnostics.DebuggerNonUserCode()]
		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");

			var fields = namesType.GetFields().Where(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName).ToList();

			return fields.FirstOrDefault();
		}
	}

	#endregion

	#region GlobalActions

	public static class GlobalActions
	{
<#	ParseActions(Context.GlobalActions); #>

	}

	#endregion
<#
	Generate(manager);
#>
<#+
	void Generate(Manager manager, MappingEntity entity)
	{
		manager.StartNewFile(Context.FileName + "_" + entity.HybridName + ".cs");
#>

	#region <#=entity.HybridName#>

	/// <summary>
	/// <#=entity.DescriptionXmlSafe.Replace("\n","").Replace("\r", " \r\n\t/// ") #>
	/// </summary>
	[ExcludeFromCodeCoverage]
	public partial class <#=entity.HybridName#>
	{
		public const string DisplayName = <#=ToLiteral(entity.Label)#>;
		public const string SchemaName = "<#=entity.SchemaName#>";
		public const string EntityLogicalName = "<#=entity.LogicalName#>";
		public const int EntityTypeCode = <#=entity.TypeCode#>;
		
		#region Metadata

		#region Enums

		public static class Enums
		{
			#region Label/value pairs

<#+foreach(var enm in entity.Enums){#>
			#region <#=enm.DisplayName#> 

			[DataContractAttribute]
			public enum <#=enm.DisplayName#> 
			{
<#+foreach(var item in enm.Items){#>
				[EnumMemberAttribute]<#= item.Name #> = <#= item.Value #>,
<#+}#>
			}

			#endregion
	
<#+}#>
			#endregion

			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			[System.Diagnostics.DebuggerNonUserCode()]
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return CrmHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}

			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			[System.Diagnostics.DebuggerNonUserCode()]
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return CrmHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
<#+foreach(var enm in entity.Enums){#>
				public const string <#=enm.DisplayName#> = "<#=enm.LogicalName#>";
<#+}#>
			}

			#endregion

			#region Labels

			public static class Labels
			{
<#+foreach(var enm in entity.Enums){#>
				#region <#=enm.DisplayName#>

				public static class <#=enm.DisplayName#> 
				{
<#+foreach(var item in enm.Items){#>
<#+foreach(var itemLoc in item.LocalizedLabels){#>
					public const string <#= item.Name #>_<#= itemLoc.LanguageCode #> = <#= ToLiteral(itemLoc.Label) #>;
<#+}#>
<#+}#>

					/// <summary>
					/// Get the value that corresponds to the label from the option-set, using the language code given.
					/// </summary>
					/// <param name="label">The label to search for, corresponding to the value</param>
					/// <param name="languageCode">The language code from CRM</param>
					/// <returns>The value corresponding to the label</returns>
					[System.Diagnostics.DebuggerNonUserCode()]
					public static int GetValue(string label, int languageCode = 1033)
					{
						return CrmHelpers.GetValue(typeof(<#=enm.DisplayName#>), label, languageCode);
					}
				}

				#endregion

<#+}#>
			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

<#+foreach(var f in entity.Fields){#>
			public const string <#=f.DisplayName#> = "<#=f.Attribute.LogicalName#>";
<#+}#>

			#endregion

			#region Schema names

			public static class Schema
			{
<#+foreach(var f in entity.Fields){#>
				public const string <#=f.DisplayName#> = "<#=f.SchemaName#>";
<#+}#>
			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
<#+ //BEGIN// 1:N Realationships
	foreach(var attribute in entity.RelationshipsOneToMany.ToList()
						.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
						.ToArray())	{#>
<#+ if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
				public const string <#=attribute.SchemaName#> = "calendarrules";
<#+ } else { #>
				public const string <#=attribute.SchemaName#> = "<#=attribute.SchemaName#>";
<#+ } #>
<#+}#>
			}
<#+ //END// 1:N Realationships #>
			
			public static class NToOne
			{
<#+ //BEGIN// N:1 Relationships 
	foreach(var attribute in entity.RelationshipsManyToOne.ToList()
						.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
						.ToArray())	{#>
				public const string <#=attribute.SchemaName#> = "<#=attribute.SchemaName#>";
<#+}#>
				public static class Lookups
				{
<#+ //BEGIN// N:1 Relationships lookups
	foreach(var attribute in entity.RelationshipsManyToOne.ToList()
						.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
						.ToArray())	{#>
					public const string <#=attribute.SchemaName#> = "<#=attribute.LogicalName#>";
<#+}#>
				}
			}
<#+ //END// N:1 Realationships #>

			public static class NToN
			{

<#+ //BEGIN// N:N Realationships 
	foreach(var attribute in entity.RelationshipsManyToMany.ToList()
						.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
						.ToArray())	{
#>
				public const string <#=attribute.SchemaName#> = "<#=attribute.SchemaName#>";
<#+}#>
			}
<#+ //END// N:N Relationships  #>
		}

		#endregion

		#region Actions

		public static class Actions
		{
<#+	ParseActions(entity.Actions); #>

		}

		#endregion

		#endregion
	}

	#endregion
<#+
		manager.EndBlock(); 
	}

	void Generate(Manager manager)
	{
		foreach (var entity in Context.Entities)
		{
			Generate(manager, entity);
		}

		manager.StartFooter();
#>
}
<#+
		manager.EndBlock();

		manager.Process(Context.SplitFiles);
	}
#>
<#+
	private void ParseActions(MappingAction[] actions)
	{
#>
<#+ foreach(var action in actions) { #>
<#+ if(!string.IsNullOrEmpty(action.Description)) { #>
			/// <summary>
			/// <#=action.Description.Replace("\n","").Replace("\r", " \r\n\t\t/// ") #>
			/// </summary>
<#+ } #>
			public class <#=action.VarName#>
			{
				public IOrganizationService Service;
				public OrganizationRequest Request;
				public OrganizationResponse Response;
				public Inputs InputParams;
				public Outputs OutputFields;
				
				[System.Diagnostics.DebuggerNonUserCode()]
				public <#=action.VarName#>()
				{
					Request = new OrganizationRequest("<#=action.Name#>");
					InputParams = new Inputs(Request);
				}
				
				[System.Diagnostics.DebuggerNonUserCode()]
				public <#=action.VarName#>(IOrganizationService service) : this()
				{
					Service = service;
				}
				
				[System.Diagnostics.DebuggerNonUserCode()]
				public <#=action.VarName#>(
<#+
	var addComma = false;
	for(var i = 0; i < action.InputFields.Length; i++)
	{
		var inputField = action.InputFields[i];

		if (!inputField.Optional)
		{
#>					<#+ if(addComma){ #>, <#+ } addComma = true; #><#=inputField.TypeName#> <#=inputField.VarName#>
<#+ } #>
<#+ } if(addComma){ #>					, <#+ } #>IOrganizationService service = null) : this()
				{
					Service = service;
<#+
	for(var i = 0; i < action.InputFields.Length; i++)
	{
		var inputField = action.InputFields[i];

		if (!inputField.Optional)
		{
#>
					InputParams.<#=inputField.VarName#> = <#=inputField.VarName#>;
<#+}#>
<#+}#>
				}
				
				[System.Diagnostics.DebuggerNonUserCode()]
				public Outputs Execute(IOrganizationService service = null)
				{
					if (service != null)
					{
						Service = service;
					}

					Response = Service.Execute(Request);

					return OutputFields = new Outputs(Response);
				}
				
				public class Inputs
				{
					public OrganizationRequest Request;

					[System.Diagnostics.DebuggerNonUserCode()]
					public Inputs(OrganizationRequest request)
					{
						Request = request;
					}

<#+ foreach(var inputField in action.InputFields) { #>
<#+ if(inputField.Optional) { #>
					/// <summary>
					///		OPTIONAL!
					/// </summary>
<#+ } #>
					public <#=inputField.TypeName#> <#=inputField.VarName#>
					{
						[System.Diagnostics.DebuggerNonUserCode()]
						set
						{
							Request["<#=inputField.Name#>"] = value;
						}
						[System.Diagnostics.DebuggerNonUserCode()]
						get
						{
							return (<#=inputField.TypeName#>) Request["<#=inputField.Name#>"];
						}
					}
<#+ } #>
				}
				
				public class Outputs
				{
					public OrganizationResponse Response;

					[System.Diagnostics.DebuggerNonUserCode()]
					public Outputs(OrganizationResponse response)
					{
						Response = response;
					}

<#+ foreach(var outputField in action.OutputFields) { #>
					public <#=outputField.TypeName#> <#=outputField.VarName#>
					{
						[System.Diagnostics.DebuggerNonUserCode()]
						private set {}
						[System.Diagnostics.DebuggerNonUserCode()]
						get
						{
							return (<#=outputField.TypeName#>) Response["<#=outputField.Name#>"];
						}
					}
<#+ } #>
				}
			}
<#+ } #>
<#+ } #>
<#+
    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

	// Credit: https://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited
	// Manager class records the various blocks so it can split them up
	class Manager {
		private class Block {
			public String Name;
			public int Start, Length;
		}

		private Block currentBlock;
		private List<Block> files = new List<Block>();
		private Block footer = new Block();
		private Block header = new Block();
		private ITextTemplatingEngineHost host;
		private StringBuilder template;
		protected List<String> generatedFileNames = new List<String>();

		public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
			return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
		}

		public void StartNewFile(String name) {
			if (name == null)
				throw new ArgumentNullException("name");
			CurrentBlock = new Block { Name = name };
		}

		public void StartFooter() {
			CurrentBlock = footer;
		}

		public void StartHeader() {
			CurrentBlock = header;
		}

		public void EndBlock() {
			if (CurrentBlock == null)
				return;
			CurrentBlock.Length = template.Length - CurrentBlock.Start;
			if (CurrentBlock != header && CurrentBlock != footer)
				files.Add(CurrentBlock);
			currentBlock = null;
		}

		public virtual void Process(bool split) {
			if (split) {
				EndBlock();
				String headerText = template.ToString(header.Start, header.Length);
				String footerText = template.ToString(footer.Start, footer.Length);
				String outputPath = Path.GetDirectoryName(host.TemplateFile);
				files.Reverse();
				foreach(Block block in files) {
					String fileName = Path.Combine(outputPath, block.Name);
					String content = headerText + template.ToString(block.Start, block.Length) + footerText;
					generatedFileNames.Add(fileName);
					CreateFile(fileName, content);
					template.Remove(block.Start, block.Length);
				}
			}
		}

		protected virtual void CreateFile(String fileName, String content) {
			if (IsFileContentDifferent(fileName, content))
				File.WriteAllText(fileName, content);
		}

		public virtual String GetCustomToolNamespace(String fileName) {
			return null;
		}

		public virtual String DefaultProjectNamespace {
			get { return null; }
		}

		protected bool IsFileContentDifferent(String fileName, String newContent) {
			return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
		}

		private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
			this.host = host;
			this.template = template;
		}

		private Block CurrentBlock {
			get { return currentBlock; }
			set {
				if (CurrentBlock != null)
					EndBlock();
				if (value != null)
					value.Start = template.Length;
				currentBlock = value;
			}
		}

		private class VSManager: Manager {
			private EnvDTE.ProjectItem templateProjectItem;
			private EnvDTE.DTE dte;
			private Action<String> checkOutAction;
			private Action<IEnumerable<String>> projectSyncAction;

			public override String DefaultProjectNamespace {
				get {
					return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
				}
			}

			public override String GetCustomToolNamespace(string fileName) {
				return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
			}

			public override void Process(bool split) {
				if (templateProjectItem.ProjectItems == null)
					return;
				base.Process(split);
				projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
			}

			protected override void CreateFile(String fileName, String content) {
				if (IsFileContentDifferent(fileName, content)) {
					CheckoutFileIfRequired(fileName);
					File.WriteAllText(fileName, content);
				}
			}

			internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
				: base(host, template) {
				var hostServiceProvider = (IServiceProvider) host;
				if (hostServiceProvider == null)
					throw new ArgumentNullException("Could not obtain IServiceProvider");
				dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
				if (dte == null)
					throw new ArgumentNullException("Could not obtain DTE from host");
				templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
				checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
				projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames);
			}

			private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
				var keepFileNameSet = new HashSet<String>(keepFileNames);
				var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
				var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
				foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
					projectFiles.Add(projectItem.get_FileNames(0), projectItem);

				// Remove unused items from the project
				foreach(var pair in projectFiles)
					if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
						pair.Value.Delete();

				// Add missing files to the project
				foreach(String fileName in keepFileNameSet)
					if (!projectFiles.ContainsKey(fileName))
						templateProjectItem.ProjectItems.AddFromFile(fileName);
			}

			private void CheckoutFileIfRequired(String fileName) {
				var sc = dte.SourceControl;
				if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
					checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
			}
		}
	}
#>
