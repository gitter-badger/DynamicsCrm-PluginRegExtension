<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".js" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrmCodeGenerator.VSPackage.Model" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<# // >>>>>>>>>> MINIMUM COMPATIBLE VERSION to successfully generate the schema using this template is 20.16.4. <<<<<<<<<< #>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName #>.js
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

<#    var suffix = new Random().Next(1000000, 9999999); #>

var SdkEntitiesInitialisation<#= suffix #> = function ()
{
<# foreach (var entity in Context.Entities) { #>
Sdk.<#=entity.HybridName#> = Sdk.<#=entity.HybridName#> || {};

Sdk.<#=entity.HybridName#>.DisplayName = <#=ToLiteral(entity.Label)#>;
Sdk.<#=entity.HybridName#>.SchemaName = "<#=entity.SchemaName#>";
Sdk.<#=entity.HybridName#>.EntityLogicalName = "<#=entity.LogicalName#>";
Sdk.<#=entity.HybridName#>.EntityTypeCode = <#=entity.TypeCode#>;

Sdk.<#=entity.HybridName#>.Enums =
{
<#foreach(var enm in entity.Enums){#>
	<#=enm.DisplayName#>:
	{
<#foreach(var item in enm.Items){#>
		<#= item.Name #>: <#= item.Value #>,
<#}#>
		dummyValue: ''
	},
	
<#}#>
	Names:
	{
<#foreach(var enm in entity.Enums){#>
		<#=enm.DisplayName#>: "<#=enm.LogicalName#>",
<#}#>
		dummyValue: ''
	},

	Labels:
	{
<#foreach(var enm in entity.Enums){#>
		<#=enm.DisplayName#>:
		{
<# foreach(var item in enm.Items) { #>
<# foreach(var itemLoc in item.LocalizedLabels) { #>
			<#= item.Name #>_<#= itemLoc.LanguageCode #>: <#= ToLiteral(itemLoc.Label) #>,
<# } #>
<# } #>
			dummyValue: ''
		},
<# } #>
		dummyValue: ''
	}
}

Sdk.<#=entity.HybridName#>.Fields =
{
<#foreach(var f in entity.Fields){#>
	<#=f.DisplayName#>: "<#=f.Attribute.LogicalName#>",
<#}#>

	Schema:
	{
<#foreach(var f in entity.Fields){#>
		<#=f.DisplayName#>: "<#=f.SchemaName#>",
<#}#>
		dummyValue: ''
	}
}

Sdk.<#=entity.HybridName#>.Relations =
{
	OneToN:
	{
<#
foreach(var attribute in entity.RelationshipsOneToMany.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{#>
<# if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
		<#=attribute.SchemaName#>: "calendarrules",
<# } else { #>
		<#=attribute.SchemaName#>: "<#=attribute.SchemaName#>",
<# } #>
<# } #>
		dummyValue: ''
	},
			
	NToOne:
	{
<#
foreach(var attribute in entity.RelationshipsManyToOne.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{#>
		<#=attribute.SchemaName#>: "<#=attribute.SchemaName#>",
<# } #>
		Lookups:
		{
<#
foreach(var attribute in entity.RelationshipsManyToOne.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{#>
			<#=attribute.SchemaName#>: "<#=attribute.LogicalName#>",
<# } #>
			dummyValue: ''
		}
	},

	NToN:
	{

<#
foreach(var attribute in entity.RelationshipsManyToMany.ToList()
				.Where(r => Context.Entities.Select(m => m.LogicalName).Contains(r.Type))
				.ToArray())	{
#>
		<#=attribute.SchemaName#>: "<#=attribute.SchemaName#>",
<# } #>
		dummyValue: ''
	}
}

<# } #>
}

function SdkEntitiesInitialisation<#= suffix #>Loop()
{
	if (typeof Sdk === 'undefined' || Sdk === null)
	{
		setTimeout(SdkEntitiesInitialisation<#= suffix #>Loop, 10);
	}
	else
	{
		SdkEntitiesInitialisation<#= suffix #>();
	}
}

SdkEntitiesInitialisation<#= suffix #>Loop();

<#+
    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }
#>
